const { BPMNServer , DefaultAppDelegate , Logger } = require("../../");
const { configuration } = require('../../configuration');


const logger = new Logger({ toConsole: false });

const server = new BPMNServer(configuration, logger);
var caseId = Math.floor(Math.random() * 10000);

let name = 'boundary-event';
let process;
let response;
let instanceId;

//test();

class Tester {
    constructor(name) {
        this.name = name;
        this.response;
        this.instanceId;
    }
async start() {
    console.log('start:' + this.name + this.msg++);
    let res;
   
    Given('Start ' + this.name + ' Process', async () => {
        res = await server.engine.start(this.name, {});
        msg = 88;
    });
    this.response = res;
    console.log('start:' + this.name + this.msg++);
    console.log(this.response);

}
async checkForWaiting(taskId) {
    console.log('check:' + this.name + this.msg++);
    Then('check for output - task is waiting', () => {
        console.log(this.response);
        expect(this.response).to.have.property('instance');
        instanceId = this.response.instance.id;
        expect(this.getItem(taskId).status).equals('wait');
    });
}
async invoke(taskId, data) {

    When('I invoke the waiting task', async () => {
        const query = {
            instance: { id: instanceId },
            items: { elementId: taskId }
        };
        this.response = await server.engine.invoke(query, data);
    });
}
getItem(response,id) {
    return response.items.filter(item => { return item.elementId == id; })[0];
    }
    async run() {
        let response;
        Feature(this.name, () => {
            Scenario('do the task in time- events will cancel', () => {
                let step,s;
                for (s = 0; s < this.steps.length; s++) {
                    step = this.steps[s];
                    console.log('doing one step' + s);
                    console.log(step);
                    if (step.action == 'start') {
                        Given('Start ' + name + ' Process', async () => {
                            response = await server.engine.start(name, {});
                        });
                    }
                    else if (step.action == 'checkItem') {
                        Then('check for item ' + step.itemId, () => {
                            console.log(this.getItem(response, step.itemId));
                            console.log(step);
                            expect(this.getItem(response, step.itemId).status).equals(step.itemStatus);
                        });

                    }
                    else if (step.action == 'invoke') {
                        Then('invoke item ', async () => {
                            const query = {
                                instance: { id: instanceId },
                                items: { elementId: step.itemId }
                            };
                            response = await server.engine.invoke(query, null);

                        });

                    }
                }

            });

        });
    }
}

async function test() {
    Feature('Boundary Event', () => {
        Scenario('do the task in time- events will cancel', () => {
            Given('Start ' + name + ' Process', async () => {
                response = await server.engine.start(name, {});
            });
            Then('check for output', () => {
                expect(response).to.have.property('execution');
                instanceId = response.execution.id;
                expect(getItem('user_task').status).equals('wait');
            });

            When('a process defintion is executed', async () => {

                const data = {};
                const query = {
                    instance: { id: instanceId },
                    items: { elementId: 'user_task' }
                };
                response = await server.engine.invoke(query, data);
            });

            When('I dont wait for events to complete', async () => {

                expect(getItem('BoundaryEvent_timer').status).equals('end');
                expect(getItem('BoundaryEvent_message').status).equals('end');

            });

            let fileName = __dirname + '/../logs/' + name + '.log';

            and('write log file to ' + fileName, async () => {
                logger.save(fileName);
            });

        });

    });

}
async function test2() {

Feature('Boundary Event', () => {
    Scenario('do the task in time- events will cancel', async () => {
        let t = new Tester('boundary-event');
        await t.start();
        await t.checkForWaiting('user_task');
        await t.invoke('user_task');

        When('I dont wait for events to complete', async () => {
                expect(t.getItem('BoundaryEvent_timer').status).equals('end');
                expect(t.getItem('BoundaryEvent_message').status).equals('end');
         });

        let fileName = __dirname + '/../logs/' + t.name + '.log';
        and('write log file to ' + fileName, async () => {
              logger.save(fileName);
            });
        });

    });
}

function getItem(id)
{
    return response.items.filter(item => { return item.elementId == id; })[0];
}

let t = new Tester(name);
t.steps = [
    { action: 'start' },
    { action: 'checkItem', itemId: 'user_task', itemStatus: 'wait' },
    { action: 'invoke', itemId: 'user_task', data: {} }
];
t.run();
